// task 11 =========================================================================================================================
// МАТЕМАТИЧНІ ОПЕРАТОРИ 2.0

// description on the task
// Функція calculateTotalPrice рахує і повертає загальну суму покупки.
//  Вона приймає два параметри, значення яких будуть задаватися під час її виклику.

// orderedQuantity - кількість одиниць товару в замовленні;
// pricePerItem - ціна однієї одиниці товару.
// Доповни код функції таким чином, щоб у змінну totalPrice записувалася
// загальна сума покупки - результат множення кількості товарів на ціну одного.

//----------------------------------------------------------------------  
// function calculateTotalPrice (orderedQuantity, pricePerItem) {

//   const totalPrice = orderedQuantity * pricePerItem;

//   return totalPrice;
//        };
//----------------------------------------------------------------------

// task 12 =========================================================================================================================
// ЗАМОВЛЕННЯ ПРОДУКТУ 2.0

// description on the task
// Функція makeOrderMessage(orderedQuantity, pricePerDroid, deliveryFee)
//  складає і повертає повідомлення про покупку ремонтних дроїдів.
//  Вона оголошує три параметри, значення яких будуть задаватися під час її виклику.

// orderedQuantity - кількість дроїдів у замовленні
// pricePerDroid - ціна одного дроїда
// deliveryFee - вартість доставки
// Доповни код функції таким чином, щоб вона повертала 
// повідомлення про замовлення у форматі
// "You ordered droids worth <total price> credits. Delivery (<delivery fee> credits) is included in total price.".
// Не забудь про ціну доставки в обчисленнях загальної вартості.
    
//----------------------------------------------------------------------  
// function makeOrderMessage(orderedQuantity, pricePerDroid, deliveryFee) {

// const totalPrice = orderedQuantity * pricePerDroid + deliveryFee;

// const message = `You ordered droids worth ${totalPrice} credits. Delivery (${deliveryFee} credits) is included in total price.`;

//   return message;  
// }
//----------------------------------------------------------------------


// task 13 =========================================================================================================================
// ОПЕРАТОРИ ПОРІВНЯННЯ >, >=, < І <=

// >>>>> Використовується для порівняння двох значень.
//  Результатом свого виконання повертають буль - true або false, тобто «так» або «ні».

// > - більше
// < - менше
// >= - більше або дорівнює
// <= - менше або дорівнює

// example:
// const a = 2;
// const b = 5;

// console.log(a > b); // false
// console.log(b > a); // true
// console.log(a >= b); // false
// console.log(b >= a); // true

// console.log(a < b); // true
// console.log(b < a); // false
// console.log(a <= b); // true
// console.log(b <= a); // false

// description on the task 
// Функція isAdult оголошує один параметр age(вік), значення якого буде задаватися під час її виклику. 
// Присвой змінній passed вираз перевірки віку користувача на повноліття.
// Людина вважається повнолітньою у віці 18 років і старше.
    
//----------------------------------------------------------------------
//    function isAdult(age) {

//   const passed = age >= 18;
//   return passed;
// }  
//----------------------------------------------------------------------

// task 14 =========================================================================================================================
// ОПЕРАТОРИ ПОРІВНЯННЯ === І !==

// >>>>> «Нестрогі» оператори == і != виконують перетворення типів значень,
//  що порівнюються, що може призвести до помилок, особливо у початківців.

// Тому для перевірки рівності або нерівності двох значень
//  використовуються оператори === (строга рівність) і !== (строга нерівність),
//   які не виконують приведення типів операндів.

// example:
// console.log(5 === "5"); // false
// console.log(5 === 5); // true
// console.log(5 !== "5"); // true
// console.log(5 !== 5); // false
// console.log(1 === true); // false
// console.log(1 !== true); // true

// description on the task 
// Функція isValidPassword(password) перевіряє рівність збереженого і введеного паролів
//  і повертає результат перевірки - буль true або false.
//  Змінна SAVED_PASSWORD зберігає значення попередньо збереженого пароля.
//  Введений пароль передається у параметр password.

// Присвой змінній isMatch вираз перевірки рівності введених і попередньо збережених паролів.
//  Результатом виразу перевірки повинно бути true, якщо значення збігаються, і false - якщо ні.

//----------------------------------------------------------------------
// function isValidPassword(password) {
//   const SAVED_PASSWORD = 'jqueryismyjam';
//   const isMatch = password === SAVED_PASSWORD;

//   return isMatch;
// }
//----------------------------------------------------------------------


// task 15 =========================================================================================================================
// ІНСТРУКЦІЯ IF...ELSE

// >>>>> Розгалуження використовуються для виконання різного коду, залежно від умови.
//  Принцип роботи простий - результат виразу в умові блоку if приводиться до буля true або false.

// example:
// if (умова) {
//   // тіло if
// } else {
//   // тіло else
// }

// >>>>> Якщо умова приводиться до true, то виконується код у фігурних дужках тіла if, а блок else ігнорується.

// example:
// let cost;
// const subscription = "pro";

// if (subscription === "pro") {
//   cost = 100;
// } else {
//   cost = 0;
// }

// console.log(cost); // 100

// >>>>> Якщо умова приводиться до false, код блоку if буде пропущений, і виконається код у фігурних дужках після блоку else.

// example:
// let cost;
// const subscription = "free";

// if (subscription === "pro") {
//   cost = 100;
// } else {
//   cost = 0;
// }

// console.log(cost); // 0

// description on the task 
// Додай вираз перевірки повноліття користувача, значення параметра age, в умову для інструкції if.

// Якщо користувач повнолітній, повинен виконуватися блок if і у змінну message записується рядок "You are an adult".
// В іншому випадку повинен виконуватися блок else і записується рядок "You are a minor".

//----------------------------------------------------------------------
// function checkAge(age) {
//   let message;

//   if (age >= 18) { // Change this line
//     message = 'You are an adult';
//   } else {
//     message = 'You are a minor';
//   }

//   return message;
// }
//----------------------------------------------------------------------