// task 21 =========================================================================================================================
// ЛОГІЧНЕ «І» (ОПЕРАТОР &&)

// >>>>> Логічні оператори використовуються для перевірки умов з багатьма виразами, наприклад у розгалуженнях.
// Оператор && приводить всі операнди до буля і повертає значення одного з них. 
// Лівий операнд, якщо його можна привести до false, і правий - в інших випадках.

// вираз && вираз

// >>>>> У наступному прикладі обидві умови повернуть true, 
// тому результатом всього виразу буде true - повернеться значення правого операнда.

// example:
// const age = 20;
// console.log(age > 10 && age < 30); // true && true -> true

// >>>>> Якщо хоча б один з операндів буде приведений до false, результатом виразу буде цей операнд.

// example:
// const age = 50;
// console.log(age > 10 && age < 30); // true && false -> false
// console.log(age > 80 && age < 120); // false && true -> false

// >>>>> Тобто логічне «І» запинається на хибності і повертає те, на чому запнувся або останній операнд.

// example:
// console.log(true && false); // false
// console.log(false && true); // false
// console.log(true && true); // true

// console.log(3 && false); // false
// console.log(false && 3); // false
// console.log(3 && true); // true
// console.log(true && 3); // 3

// description on the task 
// Функція isNumberInRange(start, end, number) перевіряє, чи входить число у проміжок.
//  Вона оголошує три параметри, значення яких будуть задаватися під час її виклику:

// number - число, входження якого перевіряється
// start - початок числового проміжку
// end - кінець числового проміжку
// Присвой змінній isInRange вираз перевірки входження number у числовий проміжок від start до end.
//  Тобто число повинно бути більшим або дорівнювати start, і меншим або дорівнювати end.
//  Результатом виразу перевірки буде буль true або false.

//----------------------------------------------------------------------
// function isNumberInRange(start, end, number) {
//   const isInRange = number >= start && number <= end; 

//   return isInRange;
// }
//----------------------------------------------------------------------


// task 22 =========================================================================================================================
// ЛОГІЧНЕ «АБО» (ОПЕРАТОР ||)

// >>>>> Оператор || приводить всі операнди до буля і повертає значення одного з них. 
// Лівий операнд, якщо його можна привести до true, і правий - в інших випадках.

// вираз || вираз

// >>>>> У наступному прикладі умова зліва поверне true,
    // тому результатом всього виразу буде true - повернеться значення першого операнда, яке було приведене до true.

// example:
// const age = 5;
// console.log(age < 10 || age > 30); // true || false -> true

// >>>>> Тут результатом теж буде true, оскільки хоча б один з операндів, у цьому випадку правий, був приведений до true.

// example:
// const age = 40;
// console.log(age < 10 || age > 30); // false || true -> true

// >>>>> А тут жодна з умов не виконується, тому отримуємо false - значення останнього операнда.

// example:
// const age = 20;
// console.log(age < 10 || age > 30); // false || false -> false

// >>>>> Тобто логічне «АБО» запинається на істині і повертає те, на чому запнулося або останній операнд.

// example:
// console.log(true || false); // true
// console.log(false || true); // true
// console.log(true || true); // true

// console.log(3 || false); // 3
// console.log(false || 3); // 3
// console.log(3 || true); // 3
// console.log(true || 3); // true

// description on the task 
// Функція checkIfCanAccessContent(subType) перевіряє, чи може користувач отримати доступ до контенту.
//  Перевірка відбувається за типом передплати.
//  Отримати доступ можуть тільки користувачі з передплатою pro або vip.

// Присвой змінній canAccessContent вираз перевірки передплати. 
// Якщо значення параметра subType дорівнює рядкам "pro" або "vip", користувач отримає доступ.
// Результатом виразу перевірки буде буль true або false.

//----------------------------------------------------------------------
// function checkIfCanAccessContent(subType) {
//   const canAccessContent = subType === "pro" || subType === "vip" ; 

//   return canAccessContent;
// }
//----------------------------------------------------------------------


// task 23 =========================================================================================================================
// ЛОГІЧНЕ «НЕ» (ОПЕРАТОР !)

// >>>>> Всі оператори, які ми розглядали до цього, були бінарними. 
// Тобто вони містили два операнди: лівий і правий.
//     Логічне «НЕ» - це унарний оператор, що виконує операцію над одним операндом справа.

// !вираз


// >>>>> Оператор! приводить операнд до буля, якщо необхідно,
//     а потім робить інверсію - замінює його на протилежний true -> false або false -> true.

// example:
// console.log(!true); // false
// console.log(!false); // true
// console.log(!3); // !3 -> !true -> false
// console.log(!"Mango"); // !'Mango' -> !true -> false
// console.log(!0); // !0 -> !false -> true
// console.log(!""); // !'' -> !false -> true

// const isOnline = true;
// const isNotOnline = !isOnline; // !isOnline -> !true -> false

// description on the task
// Функція isNumberNotInRange(start, end, number) перевіряє, чи не входить число у проміжок. 
// Тобто число повинно бути меншим або дорівнювати start і більшим або дорівнювати end.
// Результатом виразу перевірки буде буль true або false.

// Вона оголошує три параметри, значення яких будуть задаватися під час її виклику:

// number - число, невходження якого перевіряється
// start - початок числового проміжку
// end - кінець числового проміжку
// Присвой змінній isNotInRange вираз інверсії значення змінної isInRange, використовуючи оператор !.

//----------------------------------------------------------------------
// function isNumberNotInRange(start, end, number) {
//   const isInRange = number >= start && number <= end;
//   const isNotInRange = !isInRange; 

//   return isNotInRange;
// }
//----------------------------------------------------------------------


// task 24 =========================================================================================================================
// ОБЧИСЛЕННЯ ЗНИЖКИ

// description on the task
// Функція getDiscount(totalSpent) визначає значення знижки,
//     залежно від загальної суми витрачених грошей(параметр totalSpent) в магазині за весь час(партнерська програма).
//     Знижка записується у змінну discount і повертається з функції як результат її роботи.

// Використовуючи розгалуження і логічні оператори, доповни код функції.

// Якщо витрачено від 50000 (включно) або більше кредитів - знижка 10% (золотий партнер)
// Якщо витрачено від 20000 (включно) до 50000 кредитів - знижка 5% (срібний партнер)
// Якщо витрачено від 5000 (включно) до 20000 кредитів - знижка 2% (бронзовий партнер)
// Якщо витрачено менше 5000 кредитів - знижка 0 (базовий партнер)
// Значення знижок кожного рівня зберігаються в однойменних константах
// BASE_DISCOUNT, BRONZE_DISCOUNT, SILVER_DISCOUNT і GOLD_DISCOUNT.

//----------------------------------------------------------------------
// function getDiscount(totalSpent) {
//   const BASE_DISCOUNT = 0;
//   const BRONZE_DISCOUNT = 0.02;
//   const SILVER_DISCOUNT = 0.05;
//   const GOLD_DISCOUNT = 0.1;
//   let discount;
 
//   if (totalSpent >= 50000) { 
//     discount = GOLD_DISCOUNT;
//   } else if (totalSpent >= 20000 || totalSpent === 50000) { 
//    discount = SILVER_DISCOUNT;
//   } else if (totalSpent >= 5000 || totalSpent === 20000) {
//      discount = BRONZE_DISCOUNT;
//    }
//   else {
//     discount = BASE_DISCOUNT;
//   }

//   return discount;
// }
//----------------------------------------------------------------------



// task 25 =========================================================================================================================
// ТЕРНАРНИЙ ОПЕРАТОР

// >>>>> Тернарний оператор використовується як синтаксично коротша заміна інструкції if...else,
//  коли одній і тій самій змінній необхідно присвоїти різні значення за умовою.

// <умова> ? <вираз, якщо умова істинна> : <вираз, якщо умова хибна>

// example:

// before:
// let type;
// const age = 20;

// if (age >= 18) {
//   type = "adult";
// } else {
//   type = "child";
// }

// after:
// const age = 20;
// const type = age >= 18 ? "adult" : "child";
// console.log(type); // "adult"

// console.log(type); // "adult"

// description on the task
// Виконай рефакторинг рішення задачі «Склад товарів», замінивши інструкцію if...else тернарним оператором.

//----------------------------------------------------------------------
// before:
// function checkStorage(available, ordered) {
//   let message;
  //if (ordered > available) {
    //message = "Not enough goods in stock!";
 // } else {
   // message = "The order is accepted, our manager will contact you";
 // }/

  //let checkStorage = ordered > available ? "Not enough goods in stock!" :  "The order is accepted, our manager will contact you";


// after:
// function checkStorage(available, ordered) {
//   let message;
//   message = ordered > available ? "Not enough goods in stock!" :  "The order is accepted, our manager will contact you";
//----------------------------------------------------------------------



// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< //
// Запам'ятайте шість значень, які в булевому перетворенні приводяться до `false`: 
//     `0`, `NaN`, `null`, `undefined`, порожній рядок `""` або `''` і саме значення`false`.
//     Абсолютно все інше приводиться до`true`.
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< //