// task 6 =========================================================================================================================
// ШАБЛОННІ РЯДКИ

// description on the task
// Магазин з продажу ремонтних дроїдів готовий до відкриття, залишилося написати скрипт для їх замовлення. Оголоси змінні та присвой їм відповідні значення:
// pricePerDroid - ціна одного дроїда, значення 800
// orderedQuantity - кількість дроїдів у замовленні, значення 6
// deliveryFee - вартість доставки, значення 50
// totalPrice - загальна сума замовлення до сплати, не забудь про вартість доставки
// message - повідомлення про стан замовлення у форматі "You ordered droids worth <total price> credits. Delivery (<delivery fee> credits) is included in total price."

// ----------------------------------------------------------------------
// const pricePerDroid = 800;
// const orderedQuantity = 6;
// const deliveryFee = 50;
// const totalPrice = pricePerDroid * orderedQuantity + deliveryFee;
// const message = `You ordered droids worth ${totalPrice} credits. Delivery (${deliveryFee} credits) is included in total price.`;
// ----------------------------------------------------------------------

// task 7 =========================================================================================================================
// ОГОЛОШЕННЯ І ВИКЛИК ФУНКЦІЇ
// >>>>> Функція - це підпрограма, незалежна частина коду,
//  призначена для багаторазового виконання конкретної задачі з різними початковими значеннями.
// example:
// // 1. Оголошення функції multiply
// function multiply() {
//   // Тіло функції
//   console.log("multiply function invocation");
// }

// // 2. Виклики функції multiply
// multiply(); // multiply function invocation
// multiply(); // multiply function invocation
// multiply(); // multiply function invocation

// >>>>> Оголошення функції починається з ключового слова function,
//  за яким йде її ім'я — дієслово, що відповідає на питання «Що зробити?» і пара круглих дужок.
//   Тіло функції береться у фігурні дужки { } і містить інструкції, які необхідно виконати під час її виклику.
//     Потім, коли необхідно, функція викликається за допомогою імені та пари круглих дужок.

// description on the task
// Оголоси функцію sayHi, всередині якої додай console.log() з рядком "Hello, this is my first function!".
// Після оголошення виклич функцію sayHi.

// ----------------------------------------------------------------------
// function sayHi() {
//   console.log("Hello, this is my first function!")
// }
// sayHi();
// ----------------------------------------------------------------------

// task 8 =========================================================================================================================
// ПАРАМЕТРИ ТА АРГУМЕНТИ
// >>>>> В круглих дужках після імені функції йдуть параметри - перелік даних, які функція очікує під час виклику.
// Параметри - це локальні змінні, доступні тільки у тілі функції.Вони розділяються комами.
// Параметрів може бути декілька або їх взагалі може не бути, тоді записуються просто порожні круглі дужки.
// Під час виклику функції, в круглих дужках можна передати аргументи - значення для оголошених параметрів функції.

// example:
// // 1. Оголошення параметрів x, y, z
// function multiply(x, y, z) {
//   console.log(`Результат множення дорівнює ${x * y * z}`);
// }

// // 2. Передача аргументів
// multiply(2, 3, 5); // Результат множення дорівнює 30
// multiply(4, 8, 12); // Результат множення дорівнює 384
// multiply(17, 6, 25); // Результат множення дорівнює 2550

// description on the task
// Функція add повинна вміти додавати три числа і виводити результат у консоль.
// Додай функції add три параметри: a, b і c, які будуть отримувати значення аргументів під час її виклику.
// Доповни console.log() таким чином, щоб він логував рядок "Addition result equals <result>",
//     де < result > - це сума переданих чисел.

// ----------------------------------------------------------------------
// function add(a, b, c) {
//   console.log(`Addition result equals ${a + b + c}`);
// }
// ----------------------------------------------------------------------

// task 9 =========================================================================================================================
// ПОВЕРНЕННЯ ЗНАЧЕННЯ
// >>>>> Оператор return використовується для передачі значення з тіла функції у зовнішній код.
//  Коли інтерпретатор зустрічає return, він відразу ж виходить з функції(припиняє її виконання),
//     і повертає вказане значення у те місце коду, де функція була викликана.

// example:
// function multiply(x, y, z) {
//   console.log("Код до return виконується звичайним чином");

//   // Повертаємо результат виразу множення
//   return x * y * z;

//   console.log("Цей лог ніколи не виконається, він стоїть після return");
// }

// // Результат роботи функції можна зберегти у змінну
// let result = multiply(2, 3, 5);
// console.log(result); // 30

// result = multiply(4, 8, 12);
// console.log(result); // 384

// result = multiply(17, 6, 25);
// console.log(result); // 2550

// >>>>> Оператор return без явно вказаного значення повертає спеціальне значення undefined.
//  За відсутності return у тілі функції, вона все одно поверне undefined.

// deacription on the task
// Доповни код функції add таким чином, щоб вона повертала результат додавання значень трьох параметрів: a, b і c.

// ----------------------------------------------------------------------
// function add(a, b, c) {
// return a + b + c;
//   console.log ()
// }

// add(2, 5, 8); // 15

// console.log(add(15, 27, 10));
// console.log(add(10, 20, 30));
// console.log(add(5, 10, 15));
// ----------------------------------------------------------------------

// task 10 =========================================================================================================================
//  ШАБЛОННІ РЯДКИ 2.0

// deacription on the task
// Функція makeMessage(name, price) складає і повертає повідомлення про покупку.
// Вона оголошує два параметри, значення яких будуть задаватися під час її виклику.

// name - назва товару
// price - ціна товару
// Доповни код функції таким чином, щоб у змінну message записувався рядок
// "You picked <product name>, price per item is <product price> credits",
//     де < product name > і < product price > - це значення параметрів name і price.
//     Використовуй синтаксис шаблонних рядків.

// ----------------------------------------------------------------------
// function makeMessage (name, price) {

// const message = `You picked ${name}, price per item is ${price} credits`;

//   return message;
// };
// ----------------------------------------------------------------------
